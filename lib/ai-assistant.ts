// ============================================
// IA ASSISTENTE FINANCEIRO
// ============================================
// Analisa gastos e d√° conselhos personalizados

interface Message {
  role: 'user' | 'assistant' | 'system'
  content: string
}

interface FinancialContext {
  userId: string
  gastos: Array<{
    descricao: string
    valor: number
    categoria: string
    data: string
  }>
  metas?: Array<{
    nome: string
    valor_objetivo: number
    valor_atual: number
  }>
  orcamento?: {
    total: number
    gastoAtual: number
  }
  periodo?: string
}

// ============================================
// PROMPTS ESPECIALIZADOS
// ============================================

function buildSystemPrompt(): string {
  return `Voc√™ √© um assistente financeiro pessoal especializado em finan√ßas familiares brasileiras.

SUAS CARACTER√çSTICAS:
- Emp√°tico e encorajador
- Pr√°tico e objetivo
- Conhece realidade brasileira
- Usa exemplos concretos
- D√° dicas acion√°veis

REGRAS:
- Sempre responda em portugu√™s brasileiro
- Use emojis moderadamente para deixar mais amig√°vel
- Seja breve (m√°ximo 200 palavras por resposta)
- Sempre termine com uma a√ß√£o concreta que o usu√°rio pode fazer
- Use valores em Reais (R$)
- N√£o invente dados - use apenas o contexto fornecido
- Se n√£o tiver dados suficientes, pe√ßa mais informa√ß√µes

FORMATO DE RESPOSTA:
1. An√°lise breve do que foi perguntado
2. Insight principal (1-2 frases)
3. A√ß√£o concreta sugerida
4. (Opcional) Dica extra ou motiva√ß√£o

EXEMPLOS DE BOA RESPOSTA:
"Analisando seus gastos de alimenta√ß√£o, notei que voc√™ gastou R$ 1.200 este m√™s, 40% acima da m√©dia brasileira para sua faixa de renda.

üí° O vil√£o s√£o os 8 pedidos de delivery (R$ 480). Se voc√™ cozinhar em casa 3x por semana, pode economizar at√© R$ 200/m√™s.

üéØ A√á√ÉO: Esta semana, tente fazer meal prep no domingo. Separe 2h para preparar marmitas.

Lembre-se: cada real economizado √© um passo mais perto da sua meta! üí™"`
}

function buildContextPrompt(context: FinancialContext): string {
  const { gastos, metas, orcamento, periodo } = context

  let prompt = `CONTEXTO FINANCEIRO DO USU√ÅRIO:\n\n`

  // Resumo de gastos
  if (gastos && gastos.length > 0) {
    const totalGastos = gastos.reduce((sum, g) => sum + g.valor, 0)
    const categorias = gastos.reduce((acc: any, g) => {
      acc[g.categoria] = (acc[g.categoria] || 0) + g.valor
      return acc
    }, {})

    prompt += `GASTOS (${periodo || 'Per√≠odo atual'}):\n`
    prompt += `- Total gasto: R$ ${totalGastos.toFixed(2)}\n`
    prompt += `- N√∫mero de gastos: ${gastos.length}\n`
    prompt += `- Gasto m√©dio: R$ ${(totalGastos / gastos.length).toFixed(2)}\n\n`

    prompt += `POR CATEGORIA:\n`
    Object.entries(categorias)
      .sort(([, a]: any, [, b]: any) => b - a)
      .forEach(([cat, valor]: any) => {
        const percent = ((valor / totalGastos) * 100).toFixed(1)
        prompt += `- ${cat}: R$ ${valor.toFixed(2)} (${percent}%)\n`
      })
    prompt += `\n`

    // √öltimos 5 gastos
    prompt += `√öLTIMOS GASTOS:\n`
    gastos.slice(0, 5).forEach(g => {
      prompt += `- ${g.data}: ${g.descricao} - R$ ${g.valor.toFixed(2)} (${g.categoria})\n`
    })
    prompt += `\n`
  }

  // Metas
  if (metas && metas.length > 0) {
    prompt += `METAS FINANCEIRAS:\n`
    metas.forEach(m => {
      const progresso = ((m.valor_atual / m.valor_objetivo) * 100).toFixed(1)
      const falta = m.valor_objetivo - m.valor_atual
      prompt += `- ${m.nome}: R$ ${m.valor_atual.toFixed(2)} / R$ ${m.valor_objetivo.toFixed(2)} (${progresso}% - faltam R$ ${falta.toFixed(2)})\n`
    })
    prompt += `\n`
  }

  // Or√ßamento
  if (orcamento) {
    const percent = ((orcamento.gastoAtual / orcamento.total) * 100).toFixed(1)
    const restante = orcamento.total - orcamento.gastoAtual
    prompt += `OR√áAMENTO:\n`
    prompt += `- Limite: R$ ${orcamento.total.toFixed(2)}\n`
    prompt += `- Gasto: R$ ${orcamento.gastoAtual.toFixed(2)} (${percent}%)\n`
    prompt += `- Dispon√≠vel: R$ ${restante.toFixed(2)}\n`
  }

  return prompt
}

// ============================================
// CLIENTE DA API
// ============================================

export class AIFinancialAssistant {
  private apiKey: string
  private baseURL: string = 'https://api.openai.com/v1/chat/completions'

  constructor(apiKey?: string) {
    this.apiKey = apiKey || process.env.NEXT_PUBLIC_OPENAI_API_KEY || ''

    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è OpenAI API Key n√£o configurada. Use NEXT_PUBLIC_OPENAI_API_KEY')
    }
  }

  async chat(
    userMessage: string,
    context: FinancialContext,
    conversationHistory: Message[] = []
  ): Promise<string> {
    if (!this.apiKey) {
      return this.getFallbackResponse(userMessage, context)
    }

    try {
      const messages: Message[] = [
        { role: 'system', content: buildSystemPrompt() },
        { role: 'system', content: buildContextPrompt(context) },
        ...conversationHistory,
        { role: 'user', content: userMessage }
      ]

      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini', // Mais barato e r√°pido
          messages,
          max_tokens: 300,
          temperature: 0.7,
          stream: false
        })
      })

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.statusText}`)
      }

      const data = await response.json()
      return data.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua pergunta.'

    } catch (error) {
      console.error('Erro ao chamar OpenAI:', error)
      return this.getFallbackResponse(userMessage, context)
    }
  }

  // Respostas sem IA (fallback quando API n√£o est√° dispon√≠vel)
  private getFallbackResponse(message: string, context: FinancialContext): string {
    const messageLower = message.toLowerCase()
    const { gastos, metas, orcamento } = context

    // An√°lise de gastos
    if (messageLower.includes('gastei') || messageLower.includes('gast') || messageLower.includes('quanto')) {
      const total = gastos?.reduce((sum, g) => sum + g.valor, 0) || 0
      const count = gastos?.length || 0

      if (count === 0) {
        return `Voc√™ ainda n√£o registrou nenhum gasto este per√≠odo. üìù\n\nüéØ A√á√ÉO: Comece registrando seus gastos di√°rios para ter uma vis√£o clara de para onde seu dinheiro est√° indo!`
      }

      const categorias = gastos?.reduce((acc: any, g) => {
        acc[g.categoria] = (acc[g.categoria] || 0) + g.valor
        return acc
      }, {}) || {}

      const topCategoria = Object.entries(categorias)
        .sort(([, a]: any, [, b]: any) => b - a)[0]

      return `Voc√™ gastou R$ ${total.toFixed(2)} em ${count} transa√ß√µes este per√≠odo.\n\nüí° Sua categoria com mais gastos foi ${topCategoria?.[0]} (R$ ${(topCategoria?.[1] as number)?.toFixed(2)}).\n\nüéØ A√á√ÉO: Revise os gastos dessa categoria e identifique onde pode economizar 10%.`
    }

    // Metas
    if (messageLower.includes('meta') || messageLower.includes('objetivo')) {
      if (!metas || metas.length === 0) {
        return `Voc√™ ainda n√£o tem metas definidas! üéØ\n\nüí° Ter metas claras aumenta em 40% a chance de alcan√ßar seus objetivos financeiros.\n\nüéØ A√á√ÉO: Defina sua primeira meta agora. Pode ser algo simples como "Reserva de emerg√™ncia de R$ 1.000".`
      }

      const metaEmProgresso = metas.find(m => m.valor_atual < m.valor_objetivo)
      if (metaEmProgresso) {
        const progresso = ((metaEmProgresso.valor_atual / metaEmProgresso.valor_objetivo) * 100).toFixed(1)
        const falta = metaEmProgresso.valor_objetivo - metaEmProgresso.valor_atual

        return `Sua meta "${metaEmProgresso.nome}" est√° ${progresso}% completa! üéâ\n\nüí° Faltam apenas R$ ${falta.toFixed(2)} para alcan√ßar seu objetivo.\n\nüéØ A√á√ÉO: Se economizar R$ ${(falta / 3).toFixed(2)} por m√™s, voc√™ alcan√ßa em 3 meses!`
      }

      return `Parab√©ns! Voc√™ completou todas as suas metas! üèÜ\n\nüéØ A√á√ÉO: Que tal definir uma nova meta ainda mais desafiadora?`
    }

    // Or√ßamento
    if (messageLower.includes('or√ßamento') || messageLower.includes('orcamento') || messageLower.includes('limite')) {
      if (!orcamento) {
        return `Voc√™ ainda n√£o definiu um or√ßamento. üí∞\n\nüí° Ter um or√ßamento reduz gastos desnecess√°rios em at√© 20%!\n\nüéØ A√á√ÉO: Defina um limite de gastos mensal baseado em 70% da sua renda.`
      }

      const percent = ((orcamento.gastoAtual / orcamento.total) * 100).toFixed(1)
      const restante = orcamento.total - orcamento.gastoAtual

      if (parseFloat(percent) > 90) {
        return `‚ö†Ô∏è ATEN√á√ÉO! Voc√™ j√° usou ${percent}% do seu or√ßamento!\n\nüí° Restam apenas R$ ${restante.toFixed(2)}.\n\nüéØ A√á√ÉO: Priorize apenas gastos essenciais at√© o fim do per√≠odo.`
      } else if (parseFloat(percent) > 70) {
        return `Voc√™ est√° em ${percent}% do seu or√ßamento. Aten√ß√£o! ‚ö†Ô∏è\n\nüí° Ainda tem R$ ${restante.toFixed(2)} dispon√≠veis.\n\nüéØ A√á√ÉO: Evite compras por impulso nos pr√≥ximos dias.`
      } else {
        return `Muito bem! Voc√™ est√° em ${percent}% do or√ßamento. üëè\n\nüí° Restam R$ ${restante.toFixed(2)}.\n\nüéØ A√á√ÉO: Continue nesse ritmo e considere investir o que sobrar!`
      }
    }

    // Resposta gen√©rica
    return `Ol√°! Sou seu assistente financeiro. ü§ñ\n\nPosso te ajudar a:\n- Analisar seus gastos\n- Acompanhar metas\n- Controlar or√ßamento\n- Dar dicas de economia\n\nüéØ A√á√ÉO: Pergunte algo como "Por que gastei tanto?" ou "Como alcan√ßar minha meta?"`
  }

  // An√°lises autom√°ticas (sem pergunta do usu√°rio)
  async getAutoInsights(context: FinancialContext): Promise<string[]> {
    const insights: string[] = []
    const { gastos, metas, orcamento } = context

    if (!gastos || gastos.length === 0) return insights

    // Insight 1: Categoria com mais gastos
    const categorias = gastos.reduce((acc: any, g) => {
      acc[g.categoria] = (acc[g.categoria] || 0) + g.valor
      return acc
    }, {})

    const topCategoria = Object.entries(categorias)
      .sort(([, a]: any, [, b]: any) => b - a)[0]

    if (topCategoria) {
      const [cat, valor] = topCategoria
      const total = gastos.reduce((sum, g) => sum + g.valor, 0)
      const percent = ((valor as number / total) * 100).toFixed(0)
      insights.push(`üí° ${percent}% dos seus gastos s√£o em ${cat} (R$ ${(valor as number).toFixed(2)})`)
    }

    // Insight 2: Alerta de or√ßamento
    if (orcamento) {
      const percent = (orcamento.gastoAtual / orcamento.total) * 100
      if (percent > 80) {
        insights.push(`‚ö†Ô∏è Voc√™ j√° usou ${percent.toFixed(0)}% do or√ßamento!`)
      }
    }

    // Insight 3: Progresso de meta
    if (metas && metas.length > 0) {
      const metaMaisProxima = metas
        .filter(m => m.valor_atual < m.valor_objetivo)
        .sort((a, b) => {
          const progA = (a.valor_atual / a.valor_objetivo)
          const progB = (b.valor_atual / b.valor_objetivo)
          return progB - progA
        })[0]

      if (metaMaisProxima) {
        const progresso = ((metaMaisProxima.valor_atual / metaMaisProxima.valor_objetivo) * 100).toFixed(0)
        insights.push(`üéØ Sua meta "${metaMaisProxima.nome}" est√° ${progresso}% completa!`)
      }
    }

    return insights
  }
}

// ============================================
// EXPORTAR INST√ÇNCIA
// ============================================

export const aiAssistant = new AIFinancialAssistant()

// ============================================
// HOOKS PARA USAR NO REACT
// ============================================

export interface ChatMessage {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}
